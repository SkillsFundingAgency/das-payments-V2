// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SFA.DAS.Payments.AcceptanceTests.EndToEnd.Tests.Non_LevyLearner_BasicDay
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("One Non-Levy Learner finishes early, Balancing and Completion payments made PV2-3" +
        "35")]
    public partial class OneNon_LevyLearnerFinishesEarlyBalancingAndCompletionPaymentsMadePV2_335Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "One Non-Levy Learner finishes early balancing and completion payments made PV2-335.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "One Non-Levy Learner finishes early, Balancing and Completion payments made PV2-3" +
                    "35", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("1 non-levy learner finishes early balancing and completon payments made")]
        [NUnit.Framework.CategoryAttribute("EndToEnd")]
        [NUnit.Framework.TestCaseAttribute("R01/Current Academic Year", null)]
        [NUnit.Framework.TestCaseAttribute("R02/Current Academic Year", null)]
        [NUnit.Framework.TestCaseAttribute("R03/Current Academic Year", null)]
        [NUnit.Framework.TestCaseAttribute("R04/Current Academic Year", null)]
        [NUnit.Framework.TestCaseAttribute("R05/Current Academic Year", null)]
        [NUnit.Framework.TestCaseAttribute("R06/Current Academic Year", null)]
        [NUnit.Framework.TestCaseAttribute("R07/Current Academic Year", null)]
        [NUnit.Framework.TestCaseAttribute("R08/Current Academic Year", null)]
        [NUnit.Framework.TestCaseAttribute("R09/Current Academic Year", null)]
        [NUnit.Framework.TestCaseAttribute("R10/Current Academic Year", null)]
        [NUnit.Framework.TestCaseAttribute("R11/Current Academic Year", null)]
        [NUnit.Framework.TestCaseAttribute("R12/Current Academic Year", null)]
        public virtual void _1Non_LevyLearnerFinishesEarlyBalancingAndCompletonPaymentsMade(string collection_Period, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EndToEnd"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("1 non-levy learner finishes early balancing and completon payments made", null, @__tags);
#line 5
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "Priority",
                        "Start Date",
                        "Planned Duration",
                        "Total Training Price",
                        "Total Training Price Effective Date",
                        "Total Assessment Price",
                        "Total Assessment Price Effective Date",
                        "Actual Duration",
                        "Completion Status",
                        "Contract Type",
                        "Aim Sequence Number",
                        "Aim Reference",
                        "Framework Code",
                        "Pathway Code",
                        "Programme Type",
                        "Funding Line Type",
                        "SFA Contribution Percentage"});
            table1.AddRow(new string[] {
                        "learner a",
                        "1",
                        "Sep/Last Academic Year",
                        "15 months",
                        "18750",
                        "Sep/Last Academic Year",
                        "0",
                        "Sep/Last Academic Year",
                        "",
                        "continuing",
                        "ContractWithEmployer",
                        "1",
                        "ZPROG001",
                        "403",
                        "1",
                        "25",
                        "16-18 Apprenticeship (From May 2017) Non-Levy Contract (non-procured)",
                        "90%"});
#line 6
 testRunner.Given("the provider previously submitted the following learner details", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Delivery Period",
                        "On-Programme",
                        "Completion",
                        "Balancing"});
            table2.AddRow(new string[] {
                        "Aug/Last Academic Year",
                        "0",
                        "0",
                        "0"});
            table2.AddRow(new string[] {
                        "Sep/Last Academic Year",
                        "1000",
                        "0",
                        "0"});
            table2.AddRow(new string[] {
                        "Oct/Last Academic Year",
                        "1000",
                        "0",
                        "0"});
            table2.AddRow(new string[] {
                        "Nov/Last Academic Year",
                        "1000",
                        "0",
                        "0"});
            table2.AddRow(new string[] {
                        "Dec/Last Academic Year",
                        "1000",
                        "0",
                        "0"});
            table2.AddRow(new string[] {
                        "Jan/Last Academic Year",
                        "1000",
                        "0",
                        "0"});
            table2.AddRow(new string[] {
                        "Feb/Last Academic Year",
                        "1000",
                        "0",
                        "0"});
            table2.AddRow(new string[] {
                        "Mar/Last Academic Year",
                        "1000",
                        "0",
                        "0"});
            table2.AddRow(new string[] {
                        "Apr/Last Academic Year",
                        "1000",
                        "0",
                        "0"});
            table2.AddRow(new string[] {
                        "May/Last Academic Year",
                        "1000",
                        "0",
                        "0"});
            table2.AddRow(new string[] {
                        "Jun/Last Academic Year",
                        "1000",
                        "0",
                        "0"});
            table2.AddRow(new string[] {
                        "Jul/Last Academic Year",
                        "1000",
                        "0",
                        "0"});
#line 9
    testRunner.And("the following earnings had been generated for the learner", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Collection Period",
                        "Delivery Period",
                        "SFA Co-Funded Payments",
                        "Employer Co-Funded Payments",
                        "Transaction Type"});
            table3.AddRow(new string[] {
                        "R02/Last Academic Year",
                        "Sep/Last Academic Year",
                        "900",
                        "100",
                        "Learning"});
            table3.AddRow(new string[] {
                        "R03/Last Academic Year",
                        "Oct/Last Academic Year",
                        "900",
                        "100",
                        "Learning"});
            table3.AddRow(new string[] {
                        "R04/Last Academic Year",
                        "Nov/Last Academic Year",
                        "900",
                        "100",
                        "Learning"});
            table3.AddRow(new string[] {
                        "R05/Last Academic Year",
                        "Dec/Last Academic Year",
                        "900",
                        "100",
                        "Learning"});
            table3.AddRow(new string[] {
                        "R06/Last Academic Year",
                        "Jan/Last Academic Year",
                        "900",
                        "100",
                        "Learning"});
            table3.AddRow(new string[] {
                        "R07/Last Academic Year",
                        "Feb/Last Academic Year",
                        "900",
                        "100",
                        "Learning"});
            table3.AddRow(new string[] {
                        "R08/Last Academic Year",
                        "Mar/Last Academic Year",
                        "900",
                        "100",
                        "Learning"});
            table3.AddRow(new string[] {
                        "R09/Last Academic Year",
                        "Apr/Last Academic Year",
                        "900",
                        "100",
                        "Learning"});
            table3.AddRow(new string[] {
                        "R10/Last Academic Year",
                        "May/Last Academic Year",
                        "900",
                        "100",
                        "Learning"});
            table3.AddRow(new string[] {
                        "R11/Last Academic Year",
                        "Jun/Last Academic Year",
                        "900",
                        "100",
                        "Learning"});
            table3.AddRow(new string[] {
                        "R12/Last Academic Year",
                        "Jul/Last Academic Year",
                        "900",
                        "100",
                        "Learning"});
#line 23
    testRunner.And("the following provider payments had been generated", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "Priority",
                        "Start Date",
                        "Planned Duration",
                        "Total Training Price",
                        "Total Training Price Effective Date",
                        "Total Assessment Price",
                        "Total Assessment Price Effective Date",
                        "Actual Duration",
                        "Completion Status",
                        "Contract Type",
                        "Aim Sequence Number",
                        "Aim Reference",
                        "Framework Code",
                        "Pathway Code",
                        "Programme Type",
                        "Funding Line Type",
                        "SFA Contribution Percentage"});
            table4.AddRow(new string[] {
                        "learner a",
                        "1",
                        "Sep/Last Academic Year",
                        "15 months",
                        "18750",
                        "Sep/Last Academic Year",
                        "0",
                        "Sep/Last Academic Year",
                        "12 months",
                        "completed",
                        "ContractWithEmployer",
                        "1",
                        "ZPROG001",
                        "403",
                        "1",
                        "25",
                        "16-18 Apprenticeship (From May 2017) Non-Levy Contract (non-procured)",
                        "90%"});
#line 36
    testRunner.But("the Provider now changes the Learner details as follows", ((string)(null)), table4, "But ");
#line 39
 testRunner.When("the amended ILR file is re-submitted for the learners in collection period R03/Cu" +
                    "rrent Academic Year", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Delivery Period",
                        "On-Programme",
                        "Completion",
                        "Balancing"});
            table5.AddRow(new string[] {
                        "Aug/Current Academic Year",
                        "1000",
                        "0",
                        "0"});
            table5.AddRow(new string[] {
                        "Sep/Current Academic Year",
                        "0",
                        "3750",
                        "3000"});
            table5.AddRow(new string[] {
                        "Oct/Current Academic Year",
                        "0",
                        "0",
                        "0"});
            table5.AddRow(new string[] {
                        "Nov/Current Academic Year",
                        "0",
                        "0",
                        "0"});
            table5.AddRow(new string[] {
                        "Dec/Current Academic Year",
                        "0",
                        "0",
                        "0"});
            table5.AddRow(new string[] {
                        "Jan/Current Academic Year",
                        "0",
                        "0",
                        "0"});
            table5.AddRow(new string[] {
                        "Feb/Current Academic Year",
                        "0",
                        "0",
                        "0"});
            table5.AddRow(new string[] {
                        "Mar/Current Academic Year",
                        "0",
                        "0",
                        "0"});
            table5.AddRow(new string[] {
                        "Apr/Current Academic Year",
                        "0",
                        "0",
                        "0"});
            table5.AddRow(new string[] {
                        "May/Current Academic Year",
                        "0",
                        "0",
                        "0"});
            table5.AddRow(new string[] {
                        "Jun/Current Academic Year",
                        "0",
                        "0",
                        "0"});
            table5.AddRow(new string[] {
                        "Jul/Current Academic Year",
                        "0",
                        "0",
                        "0"});
#line 40
 testRunner.Then("the following learner earnings should be generated", ((string)(null)), table5, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Collection Period",
                        "Delivery Period",
                        "On-Programme",
                        "Completion",
                        "Balancing"});
            table6.AddRow(new string[] {
                        "R01/Current Academic Year",
                        "Aug/Current Academic Year",
                        "1000",
                        "0",
                        "0"});
            table6.AddRow(new string[] {
                        "R02/Current Academic Year",
                        "Sep/Current Academic Year",
                        "0",
                        "3750",
                        "3000"});
#line 54
    testRunner.And("only the following payments will be calculated", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Collection Period",
                        "Delivery Period",
                        "SFA Co-Funded Payments",
                        "Employer Co-Funded Payments",
                        "Transaction Type"});
            table7.AddRow(new string[] {
                        "R01/Current Academic Year",
                        "Aug/Current Academic Year",
                        "900",
                        "100",
                        "Learning"});
            table7.AddRow(new string[] {
                        "R02/Current Academic Year",
                        "Sep/Current Academic Year",
                        "3375",
                        "375",
                        "Completion"});
            table7.AddRow(new string[] {
                        "R02/Current Academic Year",
                        "Sep/Current Academic Year",
                        "2700",
                        "300",
                        "Balancing"});
#line 58
 testRunner.And("only the following provider payments will be recorded", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Collection Period",
                        "Delivery Period",
                        "SFA Co-Funded Payments",
                        "Employer Co-Funded Payments",
                        "Transaction Type"});
            table8.AddRow(new string[] {
                        "R01/Current Academic Year",
                        "Aug/Current Academic Year",
                        "900",
                        "100",
                        "Learning"});
            table8.AddRow(new string[] {
                        "R02/Current Academic Year",
                        "Sep/Current Academic Year",
                        "3375",
                        "375",
                        "Completion"});
            table8.AddRow(new string[] {
                        "R02/Current Academic Year",
                        "Sep/Current Academic Year",
                        "2700",
                        "300",
                        "Balancing"});
#line 63
 testRunner.And("at month end only the following provider payments will be generated", ((string)(null)), table8, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
