// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SFA.DAS.Payments.RequiredPayments.AcceptanceTests.Tests.Non_LevyLearner_BasicDay
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Two Non Levy-Learners One Finishes Late And Other Finishes Early PV2-199")]
    public partial class TwoNonLevy_LearnersOneFinishesLateAndOtherFinishesEarlyPV2_199Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Two Non Levy-Learners One Finishes Late And Other Finishes Early PV2-199.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Two Non Levy-Learners One Finishes Late And Other Finishes Early PV2-199", "\tNon-Levy - 1 finishes early and 1 finishes late", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line 5
 testRunner.Given("the current collection period is R02", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
 testRunner.And("the payments are for the current collection year", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 7
 testRunner.And("the SFA contribution percentage is 90%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "LearnerId"});
            table20.AddRow(new string[] {
                        "L1"});
            table20.AddRow(new string[] {
                        "L2"});
#line 8
 testRunner.And("following learners are undertaking training with a training provider", ((string)(null)), table20, "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "LearnerId",
                        "PriceEpisodeIdentifier",
                        "Delivery Period",
                        "TransactionType",
                        "Amount"});
            table21.AddRow(new string[] {
                        "L1",
                        "p2",
                        "1",
                        "Learning (TT1)",
                        "1000"});
            table21.AddRow(new string[] {
                        "L1",
                        "p2",
                        "2",
                        "Completion (TT2)",
                        "3750"});
            table21.AddRow(new string[] {
                        "L1",
                        "p2",
                        "2",
                        "Balancing (TT3)",
                        "3000"});
            table21.AddRow(new string[] {
                        "L2",
                        "p4",
                        "1",
                        "Learning (TT1)",
                        "1000"});
#line 12
 testRunner.And("the payments due component generates the following contract type 2 payments due:", ((string)(null)), table21, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("2_non_levy_learners_1finishes_Early")]
        [NUnit.Framework.CategoryAttribute("NonDas_BasicDay")]
        [NUnit.Framework.CategoryAttribute("Finishes_Early")]
        public virtual void _2_Non_Levy_Learners_1Finishes_Early()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("2_non_levy_learners_1finishes_Early", null, new string[] {
                        "NonDas_BasicDay",
                        "Finishes_Early"});
#line 22
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 23
 testRunner.Given("the current collection period is R02", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "LearnerId",
                        "PriceEpisodeIdentifier",
                        "Delivery Period",
                        "TransactionType",
                        "Amount"});
            table22.AddRow(new string[] {
                        "L1",
                        "p2",
                        "1",
                        "Learning (TT1)",
                        "1000"});
            table22.AddRow(new string[] {
                        "L2",
                        "p4",
                        "1",
                        "Learning (TT1)",
                        "1000"});
#line 24
 testRunner.And("the following historical contract type 2 payments exist:", ((string)(null)), table22, "And ");
#line 29
 testRunner.When("a payments due event is received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "LearnerId",
                        "PriceEpisodeIdentifier",
                        "Delivery Period",
                        "TransactionType",
                        "Amount"});
            table23.AddRow(new string[] {
                        "L1",
                        "p2",
                        "2",
                        "Completion (TT2)",
                        "3750"});
            table23.AddRow(new string[] {
                        "L1",
                        "p2",
                        "2",
                        "Balancing (TT3)",
                        "3000"});
#line 30
 testRunner.Then("the required payments component will only generate contract type 2 required payme" +
                    "nts", ((string)(null)), table23, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("2_non_levy_learners_1finishes_Late")]
        [NUnit.Framework.CategoryAttribute("NonDas_BasicDay")]
        [NUnit.Framework.CategoryAttribute("Finishes_Late")]
        public virtual void _2_Non_Levy_Learners_1Finishes_Late()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("2_non_levy_learners_1finishes_Late", null, new string[] {
                        "NonDas_BasicDay",
                        "Finishes_Late"});
#line 38
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 39
 testRunner.Given("the current collection period is R05", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "LearnerId",
                        "PriceEpisodeIdentifier",
                        "Delivery Period",
                        "TransactionType",
                        "Amount"});
            table24.AddRow(new string[] {
                        "L2",
                        "p4",
                        "5",
                        "Completion (TT2)",
                        "3000"});
#line 40
 testRunner.And("the payments due component generates more payments due:", ((string)(null)), table24, "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "LearnerId",
                        "PriceEpisodeIdentifier",
                        "Delivery Period",
                        "TransactionType",
                        "Amount"});
            table25.AddRow(new string[] {
                        "L1",
                        "p2",
                        "1",
                        "Learning (TT1)",
                        "1000"});
            table25.AddRow(new string[] {
                        "L1",
                        "p2",
                        "2",
                        "Completion (TT2)",
                        "3750"});
            table25.AddRow(new string[] {
                        "L1",
                        "p2",
                        "2",
                        "Balancing (TT3)",
                        "3000"});
            table25.AddRow(new string[] {
                        "L2",
                        "p4",
                        "1",
                        "Learning (TT1)",
                        "1000"});
#line 43
 testRunner.And("the following historical contract type 2 payments exist:", ((string)(null)), table25, "And ");
#line 50
 testRunner.When("a payments due event is received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "LearnerId",
                        "PriceEpisodeIdentifier",
                        "Delivery Period",
                        "TransactionType",
                        "Amount"});
            table26.AddRow(new string[] {
                        "L2",
                        "p4",
                        "5",
                        "Completion (TT2)",
                        "3000"});
#line 51
 testRunner.Then("the required payments component will only generate contract type 2 required payme" +
                    "nts", ((string)(null)), table26, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("2_non_levy_learners_1finishes_Early - No history")]
        [NUnit.Framework.CategoryAttribute("NonDas_BasicDay")]
        [NUnit.Framework.CategoryAttribute("Finishes_Early")]
        [NUnit.Framework.CategoryAttribute("NoHistory")]
        public virtual void _2_Non_Levy_Learners_1Finishes_Early_NoHistory()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("2_non_levy_learners_1finishes_Early - No history", null, new string[] {
                        "NonDas_BasicDay",
                        "Finishes_Early",
                        "NoHistory"});
#line 59
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 60
 testRunner.Given("the current collection period is R02", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 61
 testRunner.When("a payments due event is received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "LearnerId",
                        "PriceEpisodeIdentifier",
                        "Delivery Period",
                        "TransactionType",
                        "Amount"});
            table27.AddRow(new string[] {
                        "L1",
                        "p2",
                        "1",
                        "Learning (TT1)",
                        "1000"});
            table27.AddRow(new string[] {
                        "L1",
                        "p2",
                        "2",
                        "Completion (TT2)",
                        "3750"});
            table27.AddRow(new string[] {
                        "L1",
                        "p2",
                        "2",
                        "Balancing (TT3)",
                        "3000"});
            table27.AddRow(new string[] {
                        "L2",
                        "p4",
                        "1",
                        "Learning (TT1)",
                        "1000"});
#line 62
 testRunner.Then("the required payments component will only generate contract type 2 required payme" +
                    "nts", ((string)(null)), table27, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("2_non_levy_learners_1finishes_Late - No history")]
        [NUnit.Framework.CategoryAttribute("NonDas_BasicDay")]
        [NUnit.Framework.CategoryAttribute("Finishes_Late")]
        [NUnit.Framework.CategoryAttribute("NoHistory")]
        public virtual void _2_Non_Levy_Learners_1Finishes_Late_NoHistory()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("2_non_levy_learners_1finishes_Late - No history", null, new string[] {
                        "NonDas_BasicDay",
                        "Finishes_Late",
                        "NoHistory"});
#line 73
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 74
 testRunner.Given("the current collection period is R05", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "LearnerId",
                        "PriceEpisodeIdentifier",
                        "Delivery Period",
                        "TransactionType",
                        "Amount"});
            table28.AddRow(new string[] {
                        "L2",
                        "p4",
                        "5",
                        "Completion (TT2)",
                        "3000"});
#line 75
 testRunner.And("the payments due component generates more payments due:", ((string)(null)), table28, "And ");
#line 78
 testRunner.When("a payments due event is received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "LearnerId",
                        "PriceEpisodeIdentifier",
                        "Delivery Period",
                        "TransactionType",
                        "Amount"});
            table29.AddRow(new string[] {
                        "L1",
                        "p2",
                        "1",
                        "Learning (TT1)",
                        "1000"});
            table29.AddRow(new string[] {
                        "L1",
                        "p2",
                        "2",
                        "Completion (TT2)",
                        "3750"});
            table29.AddRow(new string[] {
                        "L1",
                        "p2",
                        "2",
                        "Balancing (TT3)",
                        "3000"});
            table29.AddRow(new string[] {
                        "L2",
                        "p4",
                        "1",
                        "Learning (TT1)",
                        "1000"});
            table29.AddRow(new string[] {
                        "L2",
                        "p4",
                        "5",
                        "Completion (TT2)",
                        "3000"});
#line 79
 testRunner.Then("the required payments component will only generate contract type 2 required payme" +
                    "nts", ((string)(null)), table29, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
